(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8653],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return u},kt:function(){return m}});var s=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,s)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,s,a=function(e,t){if(null==e)return{};var n,s,a={},r=Object.keys(e);for(s=0;s<r.length;s++)n=r[s],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(s=0;s<r.length;s++)n=r[s],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=s.createContext({}),p=function(e){var t=s.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return s.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},c=s.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=p(n),m=a,f=c["".concat(l,".").concat(m)]||c[m]||d[m]||r;return n?s.createElement(f,o(o({ref:t},u),{},{components:n})):s.createElement(f,o({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=c;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var p=2;p<r;p++)o[p]=n[p];return s.createElement.apply(null,o)}return s.createElement.apply(null,n)}c.displayName="MDXCreateElement"},9911:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return o},metadata:function(){return i},toc:function(){return l},default:function(){return u}});var s=n(2122),a=n(9756),r=(n(7294),n(3905)),o={},i={unversionedId:"examples/distillation",id:"examples/distillation",isDocsHomePage:!1,title:"Distillation",description:"With pymarlin library, distillation can be done in a standalone manner or as an extension to your original training Scenario. In this example, we will go through how the GLUE Task setup was extended to also perform distillation.",source:"@site/docs/examples/distillation.md",sourceDirName:"examples",slug:"/examples/distillation",permalink:"/PyMarlin/docs/examples/distillation",editUrl:"https://github.com/microsoft/PyMarlin/edit/master/website/docs/examples/distillation.md",version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Data interface single and multi process",permalink:"/PyMarlin/docs/examples/datamodule-example"},next:{title:"GLUE Tasks",permalink:"/PyMarlin/docs/examples/glue-tasks"}},l=[],p={toc:l};function u(e){var t=e.components,n=(0,a.Z)(e,["components"]);return(0,r.kt)("wrapper",(0,s.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"With ",(0,r.kt)("inlineCode",{parentName:"p"},"pymarlin")," library, distillation can be done in a standalone manner or as an extension to your original training Scenario. In this example, we will go through how the ",(0,r.kt)("a",{parentName:"p",href:"/PyMarlin/docs/examples/glue-tasks"},"GLUE Task")," setup was extended to also perform distillation."),(0,r.kt)("p",null,"Data Preprocessing is the same as ",(0,r.kt)("a",{parentName:"p",href:"/PyMarlin/docs/examples/glue-tasks"},"here"),". The main implementation is in the ",(0,r.kt)("inlineCode",{parentName:"p"},"ModuleInterface")," which we chose to call ",(0,r.kt)("inlineCode",{parentName:"p"},"DistillRecipe")," (inheriting from the GLUE ",(0,r.kt)("inlineCode",{parentName:"p"},"Recipe"),")."),(0,r.kt)("p",null,"The key methods of ",(0,r.kt)("inlineCode",{parentName:"p"},"DistillRecipe")," that we want to override:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Setting up teacher and student model and related items such as config as needed. Here, we have the option to modify the student config depending on the desired changes to the depth or width of the model."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},"    def setup_models(self):\n        self._setup_configs()\n        # teacher setup\n        self.teacher = AutoModelForSequenceClassification.from_pretrained(\n            os.path.join(self.args.model_args.model_wts_path, self.args.model_args.model_file),\n            config=self.model_config\n            )\n        # student setup\n        self.model = copy.deepcopy(self.teacher)\n        if len(self.student_layers) > 0:\n            layer_modules = getattr(self.model, self.args.model_args.encoder_key).encoder.layer\n            new_layer_modules = distill_utils.extract_layers(layer_modules, self.student_layers)\n            getattr(self.model, self.args.model_args.encoder_key).encoder.layer = new_layer_modules\n \n        self.teacher.eval()\n        self.output_hidden = True if 'hidden_states' in self.loss_types else False\n        self.output_attentions = True if 'attentions' in self.loss_types else False\n        return (self.model, self.teacher)\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Modify ",(0,r.kt)("inlineCode",{parentName:"p"},"train_step")," to set teacher in eval mode, get teacher outputs, get student outputs, and compute a custom loss. The loss can be a combination of ",(0,r.kt)("inlineCode",{parentName:"p"},"logits"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"labels")," or various intermediate representations such as ",(0,r.kt)("inlineCode",{parentName:"p"},"hidden_states")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"attentions"),". You have the flexibility to determine your distillation logic."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},"    def train_step(self, global_step, batch, device):\n        self.teacher.eval()\n        inputs = self._inputs_to_device(batch, device)\n        teacher_outputs = self.teacher.forward(**inputs,\n                            output_hidden_states=self.output_hidden,\n                            output_attentions=self.output_attentions,\n                            ) # label_loss, logits, hidden, attns\n        student_outputs = self.model.forward(**inputs,\n                            output_hidden_states=self.output_hidden,\n                            output_attentions=self.output_attentions,\n                            )\n        total_loss = torch.zeros([1], dtype=student_outputs[0].dtype, device=device)\n        for i, k in enumerate(self.loss_types):\n            if k == 'labels':\n                student_scores = student_outputs.loss\n                teacher_scores = teacher_outputs.loss\n            else:\n                student_scores = getattr(student_outputs, k)\n                teacher_scores = getattr(teacher_outputs, k)\n\n            if student_scores is not None and teacher_scores is not None:\n                if k == 'logits':\n                    total_loss += self.loss_weights[i] * distill_utils.logits_loss(\n                        student_scores, teacher_scores,\n                        temperature=self.distill_args.temperature,\n                    )\n                elif k != 'logits' and self.distill_args.width_shrinkage == 0:\n                    total_loss += self.loss_weights[i] * distill_utils.representations_loss(\n                                    student_scores,\n                                    teacher_scores,\n                                    [*range(len(self.student_layers))],\n                                    self.student_layers\n                    )\n        return total_loss\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"As an example, ",(0,r.kt)("inlineCode",{parentName:"p"},"on_end_train")," can be used to cleanup any changes made to the final student model config and save it to the output directory along with the student model."))),(0,r.kt)("p",null,"That's it! If you have a scenario setup it's as easy as overriding just 2 methods."))}u.isMDXComponent=!0}}]);