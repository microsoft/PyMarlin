(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8254],{3905:function(e,t,r){"use strict";r.d(t,{Zo:function(){return u},kt:function(){return m}});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),p=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},u=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=p(r),m=o,g=c["".concat(s,".").concat(m)]||c[m]||d[m]||a;return r?n.createElement(g,l(l({ref:t},u),{},{components:r})):n.createElement(g,l({ref:t},u))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,l=new Array(a);l[0]=c;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var p=2;p<a;p++)l[p]=r[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}c.displayName="MDXCreateElement"},9536:function(e,t,r){"use strict";r.r(t),r.d(t,{frontMatter:function(){return l},metadata:function(){return i},toc:function(){return s},default:function(){return u}});var n=r(2122),o=r(9756),a=(r(7294),r(3905)),l={sidebar_label:"tensorboard",title:"utils.writer.tensorboard"},i={unversionedId:"reference/utils/writer/tensorboard",id:"reference/utils/writer/tensorboard",isDocsHomePage:!1,title:"utils.writer.tensorboard",description:"Tensorboard writer module.",source:"@site/docs/reference/utils/writer/tensorboard.md",sourceDirName:"reference/utils/writer",slug:"/reference/utils/writer/tensorboard",permalink:"/PyMarlin/docs/reference/utils/writer/tensorboard",editUrl:"https://github.com/microsoft/PyMarlin/edit/master/website/docs/reference/utils/writer/tensorboard.md",version:"current",sidebar_label:"tensorboard",frontMatter:{sidebar_label:"tensorboard",title:"utils.writer.tensorboard"},sidebar:"referenceSideBar",previous:{title:"utils.writer.stdout",permalink:"/PyMarlin/docs/reference/utils/writer/stdout"},next:{title:"utils.distributed",permalink:"/PyMarlin/docs/reference/utils/distributed"}},s=[{value:"Tensorboard Objects",id:"tensorboard-objects",children:[]}],p={toc:s};function u(e){var t=e.components,r=(0,o.Z)(e,["components"]);return(0,a.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Tensorboard writer module."),(0,a.kt)("h2",{id:"tensorboard-objects"},"Tensorboard Objects"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class Tensorboard(Writer)\n")),(0,a.kt)("p",null,"This class implements a wrapper on Tensorboard","'","s SummaryWriter\nfor logging stats to Tensorboard. Please look here for detailed information\non each function:  ",(0,a.kt)("a",{parentName:"p",href:"https://pytorch.org/docs/stable/tensorboard.html#"},"https://pytorch.org/docs/stable/tensorboard.html#"),"\nVisit this blog for more examples on logging stats to Tensorboard:\n",(0,a.kt)("a",{parentName:"p",href:"https://krishansubudhi.github.io/deeplearning/2020/03/24/tensorboard-pytorch.html"},"https://krishansubudhi.github.io/deeplearning/2020/03/24/tensorboard-pytorch.html")),(0,a.kt)("h4",{id:"log_scalar"},"log","_","scalar"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def log_scalar(k, v, step)\n")),(0,a.kt)("p",null,"Log metric to Tensorboard graph."),(0,a.kt)("h4",{id:"log_multi"},"log","_","multi"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def log_multi(k, v, step)\n")),(0,a.kt)("p",null,"Log multiple metrics in the same Tensorboard graph."),(0,a.kt)("h4",{id:"log_model"},"log","_","model"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def log_model(flat_weights, flat_grads, step)\n")),(0,a.kt)("p",null,"Log model weights and gradients to Tensorboard."),(0,a.kt)("h4",{id:"log_embedding"},"log","_","embedding"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def log_embedding(tag, mat, labels, step)\n")),(0,a.kt)("p",null,"Log model embeddings to Tensorboard."),(0,a.kt)("h4",{id:"log_graph"},"log","_","graph"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def log_graph(model, device)\n")),(0,a.kt)("p",null,"Logs model graphs to Tensorboard."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"model")," ",(0,a.kt)("em",{parentName:"li"},"object")," - unwrapped model with a function get_sample_input() implemented."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"device")," ",(0,a.kt)("em",{parentName:"li"},"str")," - device type.")),(0,a.kt)("h4",{id:"log_image"},"log","_","image"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def log_image(k, v, step, dataformats='HW')\n")),(0,a.kt)("p",null,"Log image in Tensorboard."),(0,a.kt)("h4",{id:"log_pr_curve"},"log","_","pr","_","curve"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def log_pr_curve(k, preds, labels, step)\n")),(0,a.kt)("p",null,"Log Precision Recall curve in Tensorboard."),(0,a.kt)("h4",{id:"log_args"},"log","_","args"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def log_args(args)\n")),(0,a.kt)("p",null,"Log all the Arguments used in the experiment to Tensorboard."),(0,a.kt)("h4",{id:"log_histogram"},"log","_","histogram"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def log_histogram(param_name, vals, step)\n")),(0,a.kt)("p",null,"Log histograms in Tensorboard.\nAvoid using small step size since it impact training time."),(0,a.kt)("h4",{id:"flush"},"flush"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def flush()\n")),(0,a.kt)("p",null,"Flush the SummaryWriter to write out Summary to Tensorboard."),(0,a.kt)("h4",{id:"finish"},"finish"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def finish()\n")),(0,a.kt)("p",null,"Flush the SummaryWriter to write out Summary to Tensorboard and\nclose SummaryWriter."))}u.isMDXComponent=!0}}]);