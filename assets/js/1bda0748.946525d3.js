(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2870],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return p},kt:function(){return m}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),l=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=l(e.components);return r.createElement(c.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},h=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),h=l(t),m=a,f=h["".concat(c,".").concat(m)]||h[m]||d[m]||i;return t?r.createElement(f,o(o({ref:n},p),{},{components:t})):r.createElement(f,o({ref:n},p))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=h;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var l=2;l<i;l++)o[l]=t[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}h.displayName="MDXCreateElement"},3735:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return o},metadata:function(){return s},toc:function(){return c},default:function(){return p}});var r=t(2122),a=t(9756),i=(t(7294),t(3905)),o={},s={unversionedId:"examples/checkpointing",id:"examples/checkpointing",isDocsHomePage:!1,title:"Checkpointing",description:"The pymarlin.utils,checkpointer.checkpoint_utils module cointains the",source:"@site/docs/examples/checkpointing.md",sourceDirName:"examples",slug:"/examples/checkpointing",permalink:"/PyMarlin/docs/examples/checkpointing",editUrl:"https://github.com/microsoft/PyMarlin/edit/master/website/docs/examples/checkpointing.md",version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"PyMarlin in Pictures",permalink:"/PyMarlin/docs/marlin-in-pictures"},next:{title:"CIFAR image classification",permalink:"/PyMarlin/docs/examples/cifar"}},c=[],l={toc:c};function p(e){var n=e.components,t=(0,a.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,r.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"pymarlin.utils,checkpointer.checkpoint_utils")," module cointains the\n",(0,i.kt)("inlineCode",{parentName:"p"},"AbstractCheckpointer")," class that can be extended and\npassed along to ",(0,i.kt)("inlineCode",{parentName:"p"},"pymarlin.core.trainer.Trainer")," for checkpointing. A default implementation\nis provided via ",(0,i.kt)("inlineCode",{parentName:"p"},"DefaultCheckpointer")," in case no checkpointer is passed along to\n",(0,i.kt)("inlineCode",{parentName:"p"},"pymarlin.core.trainer.Trainer"),".\nUsers can control the ",(0,i.kt)("inlineCode",{parentName:"p"},"DefaultCheckpointer")," behavior via the\n",(0,i.kt)("inlineCode",{parentName:"p"},"DefaultCheckpointerArguments"),",\nand modify the arguments dataclass for their own checkpointers.\nHere is an example of how to create your own checkpointer:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'    # Implement a dataclass for custom checkpointer arguments\n    @dataclass\n    class MyCheckpointerArguments:\n        # Args for custom checkpointer class.\n        checkpoint: bool = True\n        save_dir: str = os.path.join(os.getcwd(), "checkpoints")\n        model_state_save_dir: str = os.path.join(os.getcwd(), "checkpoints")\n        load_dir: str = None\n        load_filename: str = None\n        file_prefix: str = "checkpoint"\n        file_ext: str = "pt"\n    # Implement AbstractCheckpointer\n    class MyCheckpointer(AbstractCheckpointer):\n        def __init__(self, args):\n            # Initialize checkpointer by passing along args for user configurations\n            # such as directory to load or save checkpoints, flags, etc.\n            self.args = args\n        def save(self, checkpoint_state, index, force=False):\n            # Trainer calls this method at every epoch, regardless of any\n            # arguments set, and thus this method should contain all logic for\n            # how, where, and when a checkpoint needs to be saved when called. Users can\n            # call any checkpointer\'s save method at other stages of the training lifecycle\n            # with the provided hooks, and are encouraged to implement all\n            # checkpointing logic here. An index argument is required, and can be\n            # used to create a unique name for the file to be saved or as part of the\n            # checkpointing logic. The optional force flag should allow disregarding\n            # any custom logic implemented, so as to ensure Trainer can save\n            # the last epoch when training and checkpointing is enabled.\n            # Note that args can be customized to form save path in any way required\n            # Where to save the checkpoint:\n            path = os.path.join(self.args.save_dir,\n                f"{self.args.file_prefix}_{index}.{self.args.file_ext}")\n            # Custom logic for when to save a checkpoint here\n            # When to save the checkpoint:\n            if index % 5 == 0:\n                # How to save the checkpoint:\n                torch.save(checkpoint_state, path)\n        def save_model(self, model_state, index):\n            # Trainer will call this at the end of training.\n            # An index argument is required to create a unique name for the file\n            # to be saved.\n            # Implement this method if you wish to save exclusively the ModuleInterface (model)\n            # state at the end of training. As with save(), this is called automatically by\n            # Trainer, but can be used at other stages of the training lifecycle via hooks.\n            if self.args.checkpoint and self.args.model_state_save_dir:\n                path = os.path.join(self.args.model_state_save_dir,\n                    f"{self.args.file_prefix}_model_{index}.{self.args.file_ext}")\n                torch.save(model_state, path)\n        \n        def load(self):\n            # Implements logic to load a checkpointed file. Always called\n            # upon initialization of Trainer. Leverage checkpointer args\n            # to implement how and from where to load the checkpointed file, and\n            # return the loaded checkpoint to Trainer. Trainer expects a Checkpoint\n            # dataclass instance returned.\n            if self.args.load_dir and self.args.load_filename:\n                path = os.path.join(self.args.load_dir,\n                                    self.args.load_filename)\n                return torch.load(path, map_location=torch.device(\'cpu\'))\n            else:\n                self.logger.warning(\'No checkpointer loaded, check load_fir and load_filename are set.\')\n                return Checkpoint()\n    # Create instance of custom checkpointer\n    my_args = MyCheckpointerArguments()\n    my_checkpointer = MyCheckpointer(my_args)\n    \n    # Pass along custom checkpointer to Trainer\n    trainer = Trainer(module=module_interface,\n                      trainer_backend=trainer_backend,\n                      args=trainer_args,\n                      checkpointer=my_checkpointer)\n')),(0,i.kt)("p",null,"Recall that these three methods are called automatically by ",(0,i.kt)("inlineCode",{parentName:"p"},"pymarlin.core.trainer.Trainer"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"load()"),": at ",(0,i.kt)("inlineCode",{parentName:"li"},"pymarlin.core.trainer.Trainer")," inicialization, before training."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"save()"),": at the end of every epoch and once more after training with force=True."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"save_model()"),": at the end of training.\nPlease review the ",(0,i.kt)("inlineCode",{parentName:"li"},"AbstractCheckpointer")," documentation for precise method signatures for\ncorrectly interfacing with ",(0,i.kt)("inlineCode",{parentName:"li"},"pymarlin.core.trainer.Trainer")," if creating a custom checkpointer.\nTo customize ",(0,i.kt)("em",{parentName:"li"},"what")," is checkpointed as a part of the attributes of ",(0,i.kt)("inlineCode",{parentName:"li"},"Checkpoint"),", please\noverride the ",(0,i.kt)("strong",{parentName:"li"},"get_state()")," methods at\n",(0,i.kt)("inlineCode",{parentName:"li"},"ModuleInterface.get_state()"),",\n",(0,i.kt)("inlineCode",{parentName:"li"},"Trainer.get_state()")," and\n",(0,i.kt)("inlineCode",{parentName:"li"},"TrainerBackend.get_state()"),".\nFor example, for ",(0,i.kt)("inlineCode",{parentName:"li"},"Trainer.get_state()"),":")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'    class MyTrainer(Trainer):\n        def __init__(self, module, args, trainer_backend, checkpointer):\n            super().__init__(module, args, trainer_backend, checkpointer)\n        def get_state(self) -> dict:\n            state_dict = {\n                "last_epoch": self.last_epoch,\n                "optimizers": [optimizer.state_dict() for optimizer in self.optimizers],\n                "schedulers": [scheduler.state_dict() for scheduler in self.schedulers],\n                "args": self.args   # Adding something else we want to save\n            }\n            return state_dict\n')),(0,i.kt)("p",null,"Please remember to also update ",(0,i.kt)("strong",{parentName:"p"},"update_state()")," methods if appropriate."))}p.isMDXComponent=!0}}]);