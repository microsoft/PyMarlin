(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2410],{3905:function(e,t,a){"use strict";a.d(t,{Zo:function(){return p},kt:function(){return m}});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function c(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},s=Object.keys(e);for(r=0;r<s.length;r++)a=s[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)a=s[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var l=r.createContext({}),i=function(e){var t=r.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=i(e.components);return r.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,s=e.originalType,l=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=i(a),m=n,f=u["".concat(l,".").concat(m)]||u[m]||d[m]||s;return a?r.createElement(f,o(o({ref:t},p),{},{components:a})):r.createElement(f,o({ref:t},p))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var s=a.length,o=new Array(s);o[0]=u;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:n,o[1]=c;for(var i=2;i<s;i++)o[i]=a[i];return r.createElement.apply(null,o)}return r.createElement.apply(null,a)}u.displayName="MDXCreateElement"},2731:function(e,t,a){"use strict";a.r(t),a.d(t,{frontMatter:function(){return o},metadata:function(){return c},toc:function(){return l},default:function(){return p}});var r=a(2122),n=a(9756),s=(a(7294),a(3905)),o={sidebar_label:"data_interface",title:"core.data_interface"},c={unversionedId:"reference/core/data_interface",id:"reference/core/data_interface",isDocsHomePage:!1,title:"core.data_interface",description:"Data Interface module:",source:"@site/docs/reference/core/data_interface.md",sourceDirName:"reference/core",slug:"/reference/core/data_interface",permalink:"/PyMarlin/docs/reference/core/data_interface",editUrl:"https://github.com/microsoft/PyMarlin/edit/master/website/docs/reference/core/data_interface.md",version:"current",sidebar_label:"data_interface",frontMatter:{sidebar_label:"data_interface",title:"core.data_interface"},sidebar:"referenceSideBar",next:{title:"core.module_interface",permalink:"/PyMarlin/docs/reference/core/module_interface"}},l=[{value:"DataProcessor Objects",id:"dataprocessor-objects",children:[]},{value:"DataInterface Objects",id:"datainterface-objects",children:[]}],i={toc:l};function p(e){var t=e.components,a=(0,n.Z)(e,["components"]);return(0,s.kt)("wrapper",(0,r.Z)({},i,a,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"Data Interface module:"),(0,s.kt)("p",null,"This module contains the abstract classes DataProcessor and\nDataInterface for data processing prior to model training. Users\nshould implement DataProcessor","'","s such that instances fully\nencapsulate a data processing task, and expose the process()\nmethod for calling upon the task from a DataInterface instance,\nwhich acts as ochestrator and implements an interface\nfor other modules to request train, validation datasets.\nPlease consider using the DataInterface.setup",(0,s.kt)("em",{parentName:"p"},"datasets() method\nto store these datasets within the DataInterface instance, and\nthus have the get"),"[train,val]","_dataset() methods be as\nquick and computationally inexpensive as possible, as they are\ncalled at every epoch."),(0,s.kt)("h2",{id:"dataprocessor-objects"},"DataProcessor Objects"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"class DataProcessor(ABC)\n")),(0,s.kt)("p",null,"Processes and optionally analyzes data."),(0,s.kt)("p",null,"Designed to be used in conjunction with a DataInterface, must be extended\nto implement the process() method."),(0,s.kt)("h4",{id:"__init__"},"_","_","init","_","_"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"def __init__(distrib_args: DistributedPreprocessArguments = None)\n")),(0,s.kt)("p",null,"Accepts DistributedPreprocessArguments for custom multiprocess\nrank handling."),(0,s.kt)("h4",{id:"process"},"process"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"@abstractmethod\ndef process(*args) -> Any\n")),(0,s.kt)("p",null,"Process data with operations such as loading from a source, parsing,\nformatting, filtering, or any required before Dataset creation."),(0,s.kt)("h4",{id:"analyze"},"analyze"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"def analyze() -> Any\n")),(0,s.kt)("p",null,"Optional method for analyzing data."),(0,s.kt)("h4",{id:"process_data"},"process","_","data"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"def process_data(*args) -> Any\n")),(0,s.kt)("p",null,"Process data via a DataProcessor","'","s process() method."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"data_processor")," ",(0,s.kt)("em",{parentName:"li"},"DataProcessor")," - DataProcessor to call.")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Returns"),":"),(0,s.kt)("p",null,"  Result of process() call."),(0,s.kt)("h4",{id:"multi_process_data"},"multi","_","process","_","data"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"def multi_process_data(*args, *, process_count=1) -> List\n")),(0,s.kt)("p",null,"Process data, naive multiprocessing using python multiprocessing."),(0,s.kt)("p",null,"Calls upon DataProcessor","'","s process() method with any *args provided.\nAll lists within args are split across processes as specified by\nprocess_count and executed either sync or async. Any non-list\nargs are sent directly to the process() call. Users are encouraged\nto only pass as args the objects they wish to divide among processes."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"data_processor")," ",(0,s.kt)("em",{parentName:"li"},"DataProcessor")," - DataProcessor to call."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"*args")," - Arguments to be passed on to DataProcessors","'","s process()\nmethod."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"process_count")," ",(0,s.kt)("em",{parentName:"li"},"int, optional")," - Number of worker processes to create in pool.")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Returns"),":"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"List")," - list of results to process() call per worker process.")),(0,s.kt)("h2",{id:"datainterface-objects"},"DataInterface Objects"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"class DataInterface(ABC)\n")),(0,s.kt)("p",null,"Organizer and orchestrator for loading and processing data."),(0,s.kt)("p",null,"Designed to be used in conjunction with DataProcessors.\nAbstract methods get_train_dataset() and\nget_val_dataset() must be implemented to return datasets."),(0,s.kt)("h4",{id:"setup_datasets"},"setup","_","datasets"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"def setup_datasets() -> None\n")),(0,s.kt)("p",null,"Setup the datasets before training."),(0,s.kt)("h4",{id:"get_train_dataset"},"get","_","train","_","dataset"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"@abstractmethod\ndef get_train_dataset(*args, **kwargs) -> Dataset\n")),(0,s.kt)("p",null,"Returns Dataset for train data."),(0,s.kt)("h4",{id:"get_val_dataset"},"get","_","val","_","dataset"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"@abstractmethod\ndef get_val_dataset(*args, **kwargs) -> Dataset\n")),(0,s.kt)("p",null,"Returns Dataset for val data."))}p.isMDXComponent=!0}}]);