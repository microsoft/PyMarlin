(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9840],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return u},kt:function(){return d}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),f=c(t),d=a,m=f["".concat(s,".").concat(d)]||f[d]||p[d]||i;return t?r.createElement(m,o(o({ref:n},u),{},{components:t})):r.createElement(m,o({ref:n},u))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=f;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var c=2;c<i;c++)o[c]=t[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},2862:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return o},metadata:function(){return l},toc:function(){return s},default:function(){return u}});var r=t(2122),a=t(9756),i=(t(7294),t(3905)),o={sidebar_label:"implementation",title:"plugins.hf_ner.implementation"},l={unversionedId:"reference/plugins/hf_ner/implementation",id:"reference/plugins/hf_ner/implementation",isDocsHomePage:!1,title:"plugins.hf_ner.implementation",description:"HfNERPlugin Objects",source:"@site/docs/reference/plugins/hf_ner/implementation.md",sourceDirName:"reference/plugins/hf_ner",slug:"/reference/plugins/hf_ner/implementation",permalink:"/PyMarlin/docs/reference/plugins/hf_ner/implementation",editUrl:"https://github.com/microsoft/PyMarlin/edit/master/website/docs/reference/plugins/hf_ner/implementation.md",version:"current",sidebar_label:"implementation",frontMatter:{sidebar_label:"implementation",title:"plugins.hf_ner.implementation"},sidebar:"referenceSideBar",previous:{title:"plugins.hf_ner.data_classes",permalink:"/PyMarlin/docs/reference/plugins/hf_ner/data_classes"},next:{title:"plugins.hf_ner.module_classes",permalink:"/PyMarlin/docs/reference/plugins/hf_ner/module_classes"}},s=[{value:"HfNERPlugin Objects",id:"hfnerplugin-objects",children:[]}],c={toc:s};function u(e){var n=e.components,t=(0,a.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"hfnerplugin-objects"},"HfNERPlugin Objects"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class HfNERPlugin(Plugin)\n")),(0,i.kt)("p",null,"Named Entity Recognition or Token Classification plugin for HuggingFace models"),(0,i.kt)("p",null,"plugin.setup() bootstraps the entire pipeline and returns a fully setup trainer."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example"),":"),(0,i.kt)("p",null,"  trainer = plugin.setup_trainer()\ntrainer.train()\ntrainer.validate()"),(0,i.kt)("h4",{id:"__init__"},"_","_","init","_","_"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def __init__(config: Optional[Dict] = None)\n")),(0,i.kt)("p",null,"CustomArgParser parses YAML config located at cmdline --config_path. If --config_path\nis not provided, assumes YAML file is named config.yaml and present in working directory.\nInstantiates dataclasses:\nself.data_args (arguments.DataInterfaceArguments): Instantiated dataclass containing\nargs required to initialize NERDataInterface and NERProcessor classes\nself.module_args (arguments.ModuleInterfaceArguments): Instantiated dataclass containing\nargs required to initialize NERModule class"),(0,i.kt)("p",null,"Sets properties:\nself.datainterface: data_interface.DataInterface ","[NERDataInterface]"," object\nself.dataprocessor: data_interface.DataProcessor ","[NERProcessor]"," object.\nThese two together are used to read raw data and create sequences of tokens in ",(0,i.kt)("inlineCode",{parentName:"p"},"setup_datainterface"),".\nThe processed data is fed to HuggingFace AutoModelForTokenClassification models.\nself.module: module_interface.ModuleInterface ","[NERModule]"," object\nThis is used to initialize a Marlin trainer."))}u.isMDXComponent=!0}}]);