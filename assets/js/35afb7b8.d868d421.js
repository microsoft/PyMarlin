(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2847],{3905:function(t,e,r){"use strict";r.d(e,{Zo:function(){return p},kt:function(){return d}});var n=r(7294);function o(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function s(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function a(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?s(Object(r),!0).forEach((function(e){o(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function i(t,e){if(null==t)return{};var r,n,o=function(t,e){if(null==t)return{};var r,n,o={},s=Object.keys(t);for(n=0;n<s.length;n++)r=s[n],e.indexOf(r)>=0||(o[r]=t[r]);return o}(t,e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(t);for(n=0;n<s.length;n++)r=s[n],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(o[r]=t[r])}return o}var l=n.createContext({}),u=function(t){var e=n.useContext(l),r=e;return t&&(r="function"==typeof t?t(e):a(a({},e),t)),r},p=function(t){var e=u(t.components);return n.createElement(l.Provider,{value:e},t.children)},c={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},m=n.forwardRef((function(t,e){var r=t.components,o=t.mdxType,s=t.originalType,l=t.parentName,p=i(t,["components","mdxType","originalType","parentName"]),m=u(r),d=o,g=m["".concat(l,".").concat(d)]||m[d]||c[d]||s;return r?n.createElement(g,a(a({ref:e},p),{},{components:r})):n.createElement(g,a({ref:e},p))}));function d(t,e){var r=arguments,o=e&&e.mdxType;if("string"==typeof t||o){var s=r.length,a=new Array(s);a[0]=m;var i={};for(var l in e)hasOwnProperty.call(e,l)&&(i[l]=e[l]);i.originalType=t,i.mdxType="string"==typeof t?t:o,a[1]=i;for(var u=2;u<s;u++)a[u]=r[u];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},7158:function(t,e,r){"use strict";r.r(e),r.d(e,{frontMatter:function(){return a},metadata:function(){return i},toc:function(){return l},default:function(){return p}});var n=r(2122),o=r(9756),s=(r(7294),r(3905)),a={},i={unversionedId:"utils/stats",id:"utils/stats",isDocsHomePage:!1,title:"Stats and Tensorboard logging",description:"We have implemented a wrapper on Tensorboard's SummaryWriter for logging stats to Tensorboard (TB) which makes it easy to use the utility to save TB events and visualize on TB later for tracking the progress of your training experiment. We also have the Azure ML and stdout writers to be able to write out your stats to the logs.",source:"@site/docs/utils/stats.md",sourceDirName:"utils",slug:"/utils/stats",permalink:"/PyMarlin/docs/utils/stats",editUrl:"https://github.com/microsoft/PyMarlin/edit/master/website/docs/utils/stats.md",version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Text Sequence Classification with Huggingface models",permalink:"/PyMarlin/docs/plugins/hf_seq_classification"},next:{title:"Contribution and Feedback",permalink:"/PyMarlin/docs/contributing"}},l=[{value:"Write out stats you care about",id:"write-out-stats-you-care-about",children:[]},{value:"Check Tensorboard logs",id:"check-tensorboard-logs",children:[]}],u={toc:l};function p(t){var e=t.components,a=(0,o.Z)(t,["components"]);return(0,s.kt)("wrapper",(0,n.Z)({},u,a,{components:e,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"We have implemented a wrapper on Tensorboard's SummaryWriter for logging stats to Tensorboard (TB) which makes it easy to use the utility to save TB events and visualize on TB later for tracking the progress of your training experiment. We also have the Azure ML and stdout writers to be able to write out your stats to the logs."),(0,s.kt)("p",null,"Usage is demonstrated here: "),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"import os\nos.listdir()\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"['.ipynb_checkpoints', 'Untitled.ipynb']\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"import pymarlin\nfrom pymarlin.utils.stats import global_stats, StatInitArgs\nfrom pymarlin.utils.writer import build_writer, WriterInitArgs\n")),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"global_stats")," is a singleton variable that can be used across entire application to log stats. "),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"writers = ['tensorboard','stdout','aml']\nwriterargs = WriterInitArgs(\n    tb_log_dir = './logs'\n    )\nwriter_objects = [build_writer(w, writerargs) for w in writers]\nglobal_stats.rebuild(StatInitArgs(), writer_objects)\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"SystemLog: 2021-01-29 16:02:21,033:INFO : pymarlin.utils.writer.tensorboard : 37 : Cleared directory ./logs (skipping azureml dirs)\nSystemLog: 2021-01-29 16:02:21,040:INFO : pymarlin.utils.writer.tensorboard : 40 : Created tensorboard folder ./logs : []\n")),(0,s.kt)("h2",{id:"write-out-stats-you-care-about"},"Write out stats you care about"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"for i in range(10):\n    global_stats.update('loss',random.uniform(0,2), frequent = True ) # adds a new in memory stat\n    global_stats.log_stats(step = i) #actually logs stats to stdout, tensorboard and aml simultaneously\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"SystemLog: 2021-01-29 16:06:40,276:INFO : pymarlin.utils.writer.stdout : 10 : step = 0, iteration : 0\nSystemLog: 2021-01-29 16:06:40,279:INFO : pymarlin.utils.writer.stdout : 10 : step = 0, loss : 0.44372909088471446\nSystemLog: 2021-01-29 16:06:40,284:INFO : pymarlin.utils.writer.stdout : 10 : step = 1, loss : 0.5985009500820384\nSystemLog: 2021-01-29 16:06:40,285:INFO : pymarlin.utils.writer.stdout : 10 : step = 2, loss : 1.5669796666205043\nSystemLog: 2021-01-29 16:06:40,286:INFO : pymarlin.utils.writer.stdout : 10 : step = 3, loss : 0.8748342474891679\nSystemLog: 2021-01-29 16:06:40,288:INFO : pymarlin.utils.writer.stdout : 10 : step = 4, loss : 1.8371541447672195\nSystemLog: 2021-01-29 16:06:40,290:INFO : pymarlin.utils.writer.stdout : 10 : step = 5, loss : 0.18000397399047174\nSystemLog: 2021-01-29 16:06:40,292:INFO : pymarlin.utils.writer.stdout : 10 : step = 6, loss : 0.1455008149921977\nSystemLog: 2021-01-29 16:06:40,293:INFO : pymarlin.utils.writer.stdout : 10 : step = 7, loss : 1.4704800219353158\nSystemLog: 2021-01-29 16:06:40,297:INFO : pymarlin.utils.writer.stdout : 10 : step = 8, loss : 0.8764679987392285\nSystemLog: 2021-01-29 16:06:40,298:INFO : pymarlin.utils.writer.stdout : 10 : step = 9, loss : 0.6293567937040325\n")),(0,s.kt)("h2",{id:"check-tensorboard-logs"},"Check Tensorboard logs"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"os.listdir('logs')\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"['events.out.tfevents.1611964941.krishan-surface.16776.1']\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"!tensorboard --logdir logs\n")),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"img",src:r(2477).Z})),(0,s.kt)("p",null,"For more info on stats, check the stat module docstring in ",(0,s.kt)("strong",{parentName:"p"},"pymarlin API")," section"))}p.isMDXComponent=!0},2477:function(t,e,r){"use strict";e.Z=r.p+"assets/images/tb_example-0149677b541e8126be275734b06a2c13.jpg"}}]);