(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5134],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=s(n),m=a,f=d["".concat(p,".").concat(m)]||d[m]||c[m]||i;return n?r.createElement(f,l(l({ref:t},u),{},{components:n})):r.createElement(f,l({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=d;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var s=2;s<i;s++)l[s]=n[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4496:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return l},metadata:function(){return o},toc:function(){return p},default:function(){return u}});var r=n(2122),a=n(9756),i=(n(7294),n(3905)),l={sidebar_label:"base",title:"plugins.base"},o={unversionedId:"reference/plugins/base",id:"reference/plugins/base",isDocsHomePage:!1,title:"plugins.base",description:"Base class for all plugins.",source:"@site/docs/reference/plugins/base.md",sourceDirName:"reference/plugins",slug:"/reference/plugins/base",permalink:"/PyMarlin/docs/reference/plugins/base",editUrl:"https://github.com/microsoft/PyMarlin/edit/master/website/docs/reference/plugins/base.md",version:"current",sidebar_label:"base",frontMatter:{sidebar_label:"base",title:"plugins.base"},sidebar:"referenceSideBar",previous:{title:"plugins.hf_seq_classification.module_classes",permalink:"/PyMarlin/docs/reference/plugins/hf_seq_classification/module_classes"},next:{title:"plugins.plugin_module_interface",permalink:"/PyMarlin/docs/reference/plugins/plugin_module_interface"}},p=[{value:"Plugin Objects",id:"plugin-objects",children:[]}],s={toc:p};function u(e){var t=e.components,n=(0,a.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Base class for all plugins."),(0,i.kt)("h2",{id:"plugin-objects"},"Plugin Objects"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class Plugin()\n")),(0,i.kt)("p",null,"Base class for all plugins."),(0,i.kt)("p",null,"It is structured around three core components\n","[trn.Trainer, module_interface.ModuleInterface, data_interface.DataInterface]",".\nDerived classes should implement the methods ",(0,i.kt)("inlineCode",{parentName:"p"},"setup_data"),",\n",(0,i.kt)("inlineCode",{parentName:"p"},"setup_module"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"setup"),". These methods will execute the data processing\npipeline and initialize the required components for training such as\n",(0,i.kt)("inlineCode",{parentName:"p"},"trainer")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"module_interface"),". ",(0,i.kt)("inlineCode",{parentName:"p"},"setup_trainer")," initializes the PyMarlin\ntrainer and backend."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"plugin.setup")," is provided to bootstrap the entire pipeline for a specific\ndownstream task.\nExample::"),(0,i.kt)("p",null,"trainer = plugin.setup()\ntrainer.train()\ntrainer.validate()"),(0,i.kt)("h4",{id:"__init__"},"_","_","init","_","_"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def __init__(config: Optional[Dict] = None)\n")),(0,i.kt)("p",null,"CustomArgParser parses YAML config located at cmdline --config_path. If --config_path\nis not provided, assumes YAML file is named config.yaml and present in working directory.\nself.trainer_args (trn.TrainerArguments): Instantiated dataclass containing\nargs required to initialize trn.Trainer class."),(0,i.kt)("h4",{id:"datainterface"},"datainterface"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"@property\ndef datainterface()\n")),(0,i.kt)("p",null,"DataInterface object used for data processing.\nThe property can be set in ",(0,i.kt)("inlineCode",{parentName:"p"},"setup_datainterface"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Returns"),":"),(0,i.kt)("p",null,"  An object of type data_interface.DataInterface."),(0,i.kt)("h4",{id:"dataprocessor"},"dataprocessor"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"@property\ndef dataprocessor()\n")),(0,i.kt)("p",null,"DataProcessor object(s) used for data processing.\nThe property may be used in conjuction with ",(0,i.kt)("inlineCode",{parentName:"p"},"datainterface")," in the\n",(0,i.kt)("inlineCode",{parentName:"p"},"setup_datainterface")," method."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Returns"),":"),(0,i.kt)("p",null,"  An object of type data_interface.DataProcessor."),(0,i.kt)("h4",{id:"moduleinterface"},"moduleinterface"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"@property\ndef moduleinterface()\n")),(0,i.kt)("p",null,"ModuleInterface object.\nThe property can be set in ",(0,i.kt)("inlineCode",{parentName:"p"},"setup_module"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Returns"),":"),(0,i.kt)("p",null,"  An object of type module_interface.ModuleInterface."),(0,i.kt)("h4",{id:"trainer"},"trainer"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"@property\ndef trainer()\n")),(0,i.kt)("p",null,"Trainer object.\nThe property can be set in ",(0,i.kt)("inlineCode",{parentName:"p"},"setup_trainer"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Returns"),":"),(0,i.kt)("p",null,"  An object of type trn.Trainer."),(0,i.kt)("h4",{id:"setup_datainterface"},"setup","_","datainterface"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"@abstractmethod\ndef setup_datainterface(*args: Optional)\n")),(0,i.kt)("p",null,"Derived plugins must implement this method. The method should\nexecute a generic data processing pipeline for the task and update the\nTaskDataInterface object to contain the processed train and val datasets."),(0,i.kt)("p",null,"NOTE to TaskPlugin designers: Typically, the plugin shouldn","'","t need\nany input arguments from user except from the YAML config. DataInterface and\nDataProcessor related arguments should be processed in the ",(0,i.kt)("strong",{parentName:"p"},"init")," method of\nthe TaskPlugin."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Returns"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"datainterface_obj")," ",(0,i.kt)("em",{parentName:"li"},"data_interface.DataInterface")," - TaskDataInterface object")),(0,i.kt)("h4",{id:"setup_module"},"setup","_","module"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"@abstractmethod\ndef setup_module(*args: Optional)\n")),(0,i.kt)("p",null,"Derived plugins must implement this method. The method should\ncreate a TaskModuleInterface object (module_interface.ModuleInterface)\nand set ",(0,i.kt)("inlineCode",{parentName:"p"},"moduleinterface")," property."),(0,i.kt)("p",null,"NOTE to TaskPlugin designers: Typically, the plugin shouldn","'","t need\nany input arguments from user. ModuleInterface related arguments should be\nprocessed in the ",(0,i.kt)("strong",{parentName:"p"},"init")," method of the TaskPlugin."),(0,i.kt)("h4",{id:"setup_trainer"},"setup","_","trainer"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def setup_trainer()\n")),(0,i.kt)("p",null,"Creates a trn.Trainer object and sets the ",(0,i.kt)("inlineCode",{parentName:"p"},"trainer")," property.\nUsed by all plugins unless overriden (not recommended)."),(0,i.kt)("h4",{id:"setup"},"setup"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"@abstractmethod\ndef setup(**kwargs)\n")),(0,i.kt)("p",null,"Executes all steps from data processing to trainer initialization."),(0,i.kt)("p",null,"This should be equivalent to::"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"}," plugin.setup_datainterface()\n plugin.setup_module()\n plugin.setup_trainer()\n")))}u.isMDXComponent=!0}}]);