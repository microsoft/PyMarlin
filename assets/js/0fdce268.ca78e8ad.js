(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1670],{3905:function(e,t,r){"use strict";r.d(t,{Zo:function(){return c},kt:function(){return f}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),u=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},c=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=u(r),f=a,m=d["".concat(s,".").concat(f)]||d[f]||p[f]||i;return r?n.createElement(m,l(l({ref:t},c),{},{components:r})):n.createElement(m,l({ref:t},c))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,l=new Array(i);l[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var u=2;u<i;u++)l[u]=r[u];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},1193:function(e,t,r){"use strict";r.r(t),r.d(t,{frontMatter:function(){return l},metadata:function(){return o},toc:function(){return s},default:function(){return c}});var n=r(2122),a=r(9756),i=(r(7294),r(3905)),l={sidebar_label:"distributed",title:"utils.distributed"},o={unversionedId:"reference/utils/distributed",id:"reference/utils/distributed",isDocsHomePage:!1,title:"utils.distributed",description:"distributed utils",source:"@site/docs/reference/utils/distributed.md",sourceDirName:"reference/utils",slug:"/reference/utils/distributed",permalink:"/PyMarlin/docs/reference/utils/distributed",editUrl:"https://github.com/microsoft/PyMarlin/edit/master/website/docs/reference/utils/distributed.md",version:"current",sidebar_label:"distributed",frontMatter:{sidebar_label:"distributed",title:"utils.distributed"},sidebar:"referenceSideBar",previous:{title:"utils.writer.tensorboard",permalink:"/PyMarlin/docs/reference/utils/writer/tensorboard"},next:{title:"utils.fabrics",permalink:"/PyMarlin/docs/reference/utils/fabrics"}},s=[],u={toc:s};function c(e){var t=e.components,r=(0,a.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"distributed utils"),(0,i.kt)("h4",{id:"ranks_already_set"},"ranks","_","already","_","set"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def ranks_already_set(args) -> bool\n")),(0,i.kt)("p",null,"Return True is both local and global ranks have been set."),(0,i.kt)("h4",{id:"fetch_ranks_from_azureml_preprocess"},"fetch","_","ranks","_","from","_","azureml","_","preprocess"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def fetch_ranks_from_azureml_preprocess()\n")),(0,i.kt)("p",null,"Look up distributed arguments from Azure ML environment variables."),(0,i.kt)("p",null,"Assumes OpenMPI image."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Notes"),":"),(0,i.kt)("p",null,"  Sets up NCCL environment variables used by Azure ML:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"NCCL_SOCKET_IFNAME"),(0,i.kt)("li",{parentName:"ul"},"NCCL_IB_DISABLE")),(0,i.kt)("h4",{id:"fetch_ranks_from_azureml"},"fetch","_","ranks","_","from","_","azureml"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def fetch_ranks_from_azureml()\n")),(0,i.kt)("p",null,"Look up distributed arguments from Azure ML environment variables."),(0,i.kt)("p",null,"Assumes OpenMPI image."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Notes"),":"),(0,i.kt)("p",null,"  Sets up NCCL environment variables used by Azure ML:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"NCCL_SOCKET_IFNAME"),(0,i.kt)("li",{parentName:"ul"},"NCCL_IB_DISABLE")),(0,i.kt)("h4",{id:"fetch_ranks_from_torch_distributed_launch"},"fetch","_","ranks","_","from","_","torch","_","distributed","_","launch"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def fetch_ranks_from_torch_distributed_launch()\n")),(0,i.kt)("p",null,"Read distributed arguments set by torch.distributed.launch via environment variables."),(0,i.kt)("h4",{id:"set_environment_variables_for_nccl_backend"},"set","_","environment","_","variables","_","for","_","nccl","_","backend"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def set_environment_variables_for_nccl_backend()\n")),(0,i.kt)("p",null,"Sets distributed training environments for azureml openmpi runs with NCCL backend."),(0,i.kt)("h4",{id:"rank_zero_only"},"rank","_","zero","_","only"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def rank_zero_only(fn)\n")),(0,i.kt)("p",null,"Decorates functions to only execute on global rank 0, else wait via torch.distributed"))}c.isMDXComponent=!0}}]);