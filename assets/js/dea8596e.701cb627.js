(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2065],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return p},kt:function(){return f}});var r=t(7294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,l=function(e,n){if(null==e)return{};var t,r,l={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var u=r.createContext({}),c=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(u.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,l=e.mdxType,o=e.originalType,u=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=c(t),f=l,m=d["".concat(u,".").concat(f)]||d[f]||s[f]||o;return t?r.createElement(m,a(a({ref:n},p),{},{components:t})):r.createElement(m,a({ref:n},p))}));function f(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var o=t.length,a=new Array(o);a[0]=d;var i={};for(var u in n)hasOwnProperty.call(n,u)&&(i[u]=n[u]);i.originalType=e,i.mdxType="string"==typeof e?e:l,a[1]=i;for(var c=2;c<o;c++)a[c]=t[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},3980:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return a},metadata:function(){return i},toc:function(){return u},default:function(){return p}});var r=t(2122),l=t(9756),o=(t(7294),t(3905)),a={sidebar_label:"plugin_module_interface",title:"plugins.plugin_module_interface"},i={unversionedId:"reference/plugins/plugin_module_interface",id:"reference/plugins/plugin_module_interface",isDocsHomePage:!1,title:"plugins.plugin_module_interface",description:"plugin module interface",source:"@site/docs/reference/plugins/plugin_module_interface.md",sourceDirName:"reference/plugins",slug:"/reference/plugins/plugin_module_interface",permalink:"/PyMarlin/docs/reference/plugins/plugin_module_interface",editUrl:"https://github.com/microsoft/PyMarlin/edit/master/website/docs/reference/plugins/plugin_module_interface.md",version:"current",sidebar_label:"plugin_module_interface",frontMatter:{sidebar_label:"plugin_module_interface",title:"plugins.plugin_module_interface"},sidebar:"referenceSideBar",previous:{title:"plugins.base",permalink:"/PyMarlin/docs/reference/plugins/base"},next:{title:"utils.checkpointer.checkpoint_utils",permalink:"/PyMarlin/docs/reference/utils/checkpointer/checkpoint_utils"}},u=[{value:"PluginModuleInterface Objects",id:"pluginmoduleinterface-objects",children:[]}],c={toc:u};function p(e){var n=e.components,t=(0,l.Z)(e,["components"]);return(0,o.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"plugin module interface"),(0,o.kt)("h2",{id:"pluginmoduleinterface-objects"},"PluginModuleInterface Objects"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class PluginModuleInterface(module_interface.ModuleInterface)\n")),(0,o.kt)("p",null,"Common plugin module interface to easily load Huggingface tokenizers and Configs"),(0,o.kt)("h4",{id:"auto_setup"},"auto","_","setup"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def auto_setup(automodel_class)\n")),(0,o.kt)("p",null,"Run all (tokenizer,config,model) setups"),(0,o.kt)("h4",{id:"data"},"data"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"@property\ndef data()\n")),(0,o.kt)("p",null,"DataInterface object that is used to retrieve corresponding train or val dataset."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Returns"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"data")," - DataInterface object with at least one of train or val data.")),(0,o.kt)("h4",{id:"model"},"model"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"@property\ndef model()\n")),(0,o.kt)("p",null,"Pytorch model."),(0,o.kt)("h4",{id:"setup_tokenizer"},"setup","_","tokenizer"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def setup_tokenizer()\n")),(0,o.kt)("p",null,"Initializes AutoTokenizer from\nmodel_args.tokenizer_path or model_args.hf_model string"),(0,o.kt)("h4",{id:"setup_model_config"},"setup","_","model","_","config"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def setup_model_config()\n")),(0,o.kt)("p",null,"Initializes AutoConfig from\nmodel_args.model_config + model_args.model_config_file path or model_args.hf_model string"),(0,o.kt)("h4",{id:"setup_model"},"setup","_","model"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def setup_model(automodel_class)\n")),(0,o.kt)("p",null,"Initializes automodel_class arg by either:\nOption 1: Load weights from specified files mentioned in YAML config\nmodel:\nmodel_config_path\nmodel_config_file\nmodel_path\nmodel_file\nOption 2: Load from Huggingface model hub, specify string in YAML config as:\nmodel:\nhf_model"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"automodel_class")," - Huggingface AutoModelFor* class")))}p.isMDXComponent=!0}}]);