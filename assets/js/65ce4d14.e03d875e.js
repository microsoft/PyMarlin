(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5627],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return p},kt:function(){return d}});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=i.createContext({}),c=function(e){var t=i.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return i.createElement(o.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},f=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,o=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),f=c(n),d=a,m=f["".concat(o,".").concat(d)]||f[d]||u[d]||r;return n?i.createElement(m,s(s({ref:t},p),{},{components:n})):i.createElement(m,s({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,s=new Array(r);s[0]=f;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"==typeof e?e:a,s[1]=l;for(var c=2;c<r;c++)s[c]=n[c];return i.createElement.apply(null,s)}return i.createElement.apply(null,n)}f.displayName="MDXCreateElement"},301:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return s},metadata:function(){return l},toc:function(){return o},default:function(){return p}});var i=n(2122),a=n(9756),r=(n(7294),n(3905)),s={sidebar_label:"implementation",title:"plugins.hf_seq_classification.implementation"},l={unversionedId:"reference/plugins/hf_seq_classification/implementation",id:"reference/plugins/hf_seq_classification/implementation",isDocsHomePage:!1,title:"plugins.hf_seq_classification.implementation",description:"HfSeqClassificationPlugin Objects",source:"@site/docs/reference/plugins/hf_seq_classification/implementation.md",sourceDirName:"reference/plugins/hf_seq_classification",slug:"/reference/plugins/hf_seq_classification/implementation",permalink:"/PyMarlin/docs/reference/plugins/hf_seq_classification/implementation",editUrl:"https://github.com/microsoft/PyMarlin/edit/master/website/docs/reference/plugins/hf_seq_classification/implementation.md",version:"current",sidebar_label:"implementation",frontMatter:{sidebar_label:"implementation",title:"plugins.hf_seq_classification.implementation"},sidebar:"referenceSideBar",previous:{title:"plugins.hf_seq_classification.data_classes",permalink:"/PyMarlin/docs/reference/plugins/hf_seq_classification/data_classes"},next:{title:"plugins.hf_seq_classification.module_classes",permalink:"/PyMarlin/docs/reference/plugins/hf_seq_classification/module_classes"}},o=[{value:"HfSeqClassificationPlugin Objects",id:"hfseqclassificationplugin-objects",children:[]}],c={toc:o};function p(e){var t=e.components,n=(0,a.Z)(e,["components"]);return(0,r.kt)("wrapper",(0,i.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"hfseqclassificationplugin-objects"},"HfSeqClassificationPlugin Objects"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class HfSeqClassificationPlugin(Plugin)\n")),(0,r.kt)("p",null,"Plugin for Text Sequence Classification using Huggingface models."),(0,r.kt)("p",null,"plugin.setup() bootstraps the entire pipeline and returns a fully setup trainer.\nExample::"),(0,r.kt)("p",null,"trainer = plugin.setup()\ntrainer.train()\ntrainer.validate()"),(0,r.kt)("p",null,"Alternatively, you can run ",(0,r.kt)("inlineCode",{parentName:"p"},"setup_datainterface")," ",(0,r.kt)("inlineCode",{parentName:"p"},"setup_module")," ",(0,r.kt)("inlineCode",{parentName:"p"},"setup_trainer")," individually.\nExample::"),(0,r.kt)("p",null,"plugin.setup_datainterface()\nplugin.setup_module()\ntrainer = plugin.setup_trainer()"),(0,r.kt)("h4",{id:"__init__"},"_","_","init","_","_"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def __init__(config: Optional[Dict] = None)\n")),(0,r.kt)("p",null,"CustomArgParser parses YAML config located at cmdline --config_path. If --config_path\nis not provided, assumes YAML file is named config.yaml and present in working directory.\nInstantiates dataclasses:\nself.data_args (arguments.DataInterfaceArguments): Instantiated dataclass containing\nargs.\nself.module_args (arguments.ModuleInterfaceArguments): Instantiated dataclass containing\nargs required to initialize HfSeqClassificationModule class.\nself.distill_args (arguments.DistillationArguments): Instantiated dataclass\nrequired to initialize DistillHfModule.\nSet self.distill_args.enable = True in config file to do knowledge distillation\ninstead of regular training.\nSets properties:\nself.datainterface: data_interface.DataInterface ","[HfSeqClassificationDataInterface]"," object\nself.module: module_interface.ModuleInterface ","[HfSeqClassificationModule]"," object\nThis is used to initialize a Marlin trainer."),(0,r.kt)("h4",{id:"setup_datainterface"},"setup","_","datainterface"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def setup_datainterface()\n")),(0,r.kt)("p",null,"Calls ",(0,r.kt)("inlineCode",{parentName:"p"},"datainterface.setup_datasets(train_data, val_data)"),"."),(0,r.kt)("p",null,"Assumptions:\nTraining and validation files are placed in separate directories.\nAccepted file formats: source/target text lines in data_args.data_dir/{train,val}.{source,targets}"),(0,r.kt)("h4",{id:"setup_module"},"setup","_","module"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def setup_module()\n")),(0,r.kt)("p",null,"Sets ",(0,r.kt)("inlineCode",{parentName:"p"},"HfSeqClassificationModule.data")," property to ",(0,r.kt)("inlineCode",{parentName:"p"},"datainterface")," which contains\nthe processed datasets. Assertion error is thrown if ",(0,r.kt)("inlineCode",{parentName:"p"},"datainterface")," retrieves no train\nor val data, indicating that ",(0,r.kt)("inlineCode",{parentName:"p"},"datainterface")," hasn","'","t been setup with processed data.\nSets the ",(0,r.kt)("inlineCode",{parentName:"p"},"HfSeqClassificationModule.model")," property after initializing weights:\nOption 1: Load weights from specified files mentioned in YAML config\nmodel:\nmodel_config_path\nmodel_config_file\nmodel_path\nmodel_file\nOption 2: Load from Huggingface model hub, specify string in YAML config as:\nmodel:\nhf_model"),(0,r.kt)("h4",{id:"setup"},"setup"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def setup()\n")),(0,r.kt)("p",null,"Executes all the setup methods required to create a trn.Trainer object.\nTrainer needs ",(0,r.kt)("inlineCode",{parentName:"p"},"moduleinterface")," and backend is specified by self.trainer_args.backend."))}p.isMDXComponent=!0}}]);